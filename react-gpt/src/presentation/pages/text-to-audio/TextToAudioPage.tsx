import { useRef, useState } from "react"
import { GptMessage, GptMessageAudio, MyMessage, TextMessageBoxSelect, TypingLoader } from "../../components"
import { textToAudioUseCase } from "../../../core/use-cases";

interface TextMessage {
  text: string;
  isGpt: boolean;
  type: 'text';
}

interface AudioMessage {
  text: string;
  isGpt: boolean;
  audio: string;
  type: 'audio';
}

type Message = TextMessage | AudioMessage;

const voices = [
  { id: "nova", text: "Nova" },
  { id: "alloy", text: "Alloy" },
  { id: "fable", text: "Fable" },
  { id: "onyx", text: "Onyx" },
  { id: "echo", text: "Echo" },
  { id: "shimmer", text: "Shimmer" },
];

const disclaimer = `## Hello, what do you need to speech?
* Remember that all the audios are generated by AI
`;

export const TextToAudioPage = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);

  const abortController = useRef(new AbortController());
  const isRunning = useRef(false);

  const handlePost = async (text: string, selectedVoice: string) => {
    setIsLoading(true);

    if (isRunning.current) {
      abortController.current.abort();
      abortController.current = new AbortController();
    }

    const newMessage = `Speech to audio: "${text}" with the voice ${selectedVoice}`;
    setMessages((prev) => [...prev, { text: newMessage, isGpt: false, type: 'text' }]);

    const { ok, message, audioUrl } = await textToAudioUseCase(text, selectedVoice);
    setIsLoading(false);

    if (!ok) return;

    setMessages((messages) => [...messages, { text: `The voice ${selectedVoice} speaking your text: ${message}`, isGpt: true, type: 'audio', audio: audioUrl! }]);

    isRunning.current = false;
  }

  return (
    <div className="chat-container">
      <div className="chat-messages">
        <div className="grid grid-cols-12 gap-y-2">
          <GptMessage text={disclaimer} />

          {
            messages.map((message, index) => (
              message.isGpt
                ? message.type === 'audio'
                  ? <GptMessageAudio key={index} text={message.text} audioUrl={message.audio} />
                  : <GptMessage key={index} text={message.text} />
                : <MyMessage key={index} text={message.text} />
            ))
          }

          {
            isLoading && (
              <div className="col-start-1 col-end-12 fade-in">
                <TypingLoader className="fade-in" />
              </div>
            )
          }

        </div>
      </div>

      <TextMessageBoxSelect options={voices} onSendMessage={handlePost} placeholder="Type tour text here..." />

    </div>
  )
}
